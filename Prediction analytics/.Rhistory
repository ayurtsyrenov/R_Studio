ayur<-read.table(file=file.choose(), header=TRUE, sep=";")
data<-read.table(file=file.choose(), header= TRUE, sep=",")
summary(data)
View(data)
data<-read.table(file=file.choose(), header= TRUE)
data<-read.table(file=file.choose(), header= TRUE)
summary(data)
View(data)
data<-read.table(file=file.choose(), header= TRUE, sep=";")
View(data)
summary(data)
ts.data<-ts(data$X, start=c(2018,1,1), frequency = 365)
tsdisplay(ts.data)
plot(ts.data)
data<-read.table(file=file.choose(), header= TRUE, sep=";")
summary(data)
library(forecast)
install.packages("forecast")
library(forecast)
library(forecast)
install.packages("tseries")
install.packages("forecast")
library(forecast)
plot(ts.data)
install.packages("forecast")
library(forecast)
tsdisplay(ts.data)
data<-read.table(file=file.choose(), header= TRUE, sep=";")
summary(data)
ts.data<-ts(data$curs, start=c(2000,1,1), frequency = 12)
ts.data<-ts(data$curs, start=c(2000,1,1), frequency = 12)
tsdisplay(ts.data)
library(forecast)
install.packages("forecast")
library(forecast)
install.packages("ggplot2")
library(ggplot)
data<-read.table(file=file.choose(), header= TRUE, sep=";")
summary(data)
reg<-lm(cost~Click, data=data)
install.packages(c("dplyr", "ggplot2", "GGally", "psych"))
library("dplyr")
library("ggplot2")
library("GGally")
library("psych")
d <- cars
glimpse(d)
help(cats)
help(cars)
head(d)
tail(d)
describe(d)
ncol(d)
nrow(d)
strd
str(d)
mean(d$speed)
d2 <- mutate(d, speed=1.67*speed,
dist=0.3*dist, ratio=dist/speed)
glimpse(d2)
# visualization
qplot(data=d2, dist)
# visualization
qplot(data=d2, dist, xlab="Длина тормозного пути", ylab = "Количество машин", main = "Данные 1920х годов")
qplot(data=d2, speed, dist)
# если много переменных, то через +
model <- lm(data=d2, dist~speed)
model
beta_hat <- coef(model)
beta_hat
beta_hat <- coef(model)
beta_hat
eps <- residuals(models)
eps <- residuals(model)
eps
y <- d2$dist
y_hat<-fitted(model)
RSS <-deviance(model)
RSS
TSS <- sum((y-mean(y))^2)
TSS
ESS <- TSS - RSS
ESS
R2 <- ESS/TSS
R2
cor(y,y_hat)
cor(y,y_hat)^2
X <- model.matrix(model)
X
nd <- data.frame(speed=c(40,60))
nd
predict(model, nd)
qplot(data=d2, speed, dist) + stat_smooth(method="lm")
# another data
t <- swiss
summary(t)
glimpse(t)
describe(t)
ggpairs(t)
model2 <- lm(data=t, Fertility~Agriculture
+ Education+Catholic)
model2
#eps
residuals(model2)
#y^
fitted(model2)
#RSS
deviance(model2)
report <- summary(model2)
report
report$r.squared
cor(t$Fertility, fitted(model2))
cor(t$Fertility, fitted(model2))^2
nd2 <- data.frame(Agriculture=0.5, Catholic=0.5, Education=20)
predict(model2,nd2)
library("dplyr") # обработка данных
library("ggplot2") #визуализация
library("GGally") #матрица диаграм рассеивания
library("psych") #описательные статистики
d <- cars
glimpse(d)
help(cars)
head(d)
tail(d)
describe(d)
ncol(d)
nrow(d)
str(d)
mean(d$speed)
# change value
d2 <- mutate(d, speed=1.67*speed,
dist=0.3*dist, ratio=dist/speed)
# change value
d2 <- mutate(d, speed=1.67*speed,
dist=0.3*dist, ratio=dist/speed)
glimpse(d2)
# visualization
qplot(data=d2, dist, xlab="Длина тормозного пути", ylab = "Количество машин", main = "Данные 1920х годов")
qplot(data=d2, speed, dist)
# если много переменных, то через +
model <- lm(data=d2, dist~speed)
model
beta_hat <- coef(model)
beta_hat
eps <- residuals(model)
eps
y <- d2$dist
y_hat<-fitted(model)
RSS <-deviance(model)
RSS
TSS <- sum((y-mean(y))^2)
TSS
ESS <- TSS - RSS
ESS
R2 <- ESS/TSS
R2
cor(y,y_hat)^2
X <- model.matrix(model)
X
rm(list = ls())
setwd("~/Data analytics/R/R_Studio/Prediction analytics")
library(ggplot2)
library(tseries)
library(forecast)
install.packages("tseries")
install.packages("forecast")
library(ggplot2)
library(tseries)
library(forecast)
install.packages("forecast")
library(forecast)
data <- read.table(file = "BTC.csv", header = TRUE, sep = ";")
plot(data)
summary(data)
ts_data <- ts(data, start=c(2019,09,22), frequency = 365)
plot(ts_data)
ts_data <- ts(data$PRICE, start=c(2019,09,22), frequency = 365)
plot(ts_data)
plot(ts_data, main = "Котировки BTC/USD", xlab = "Time", ylab = "Value")
tsdisplay(ts_data)
# подключаем необходимые библиотеки
library(ggplot2)
tsdisplay(ts_data)
# задача - построить прогноз для котировок BTC методами ARIMA и Holt-Winters
# подключаем необходимые библиотеки
library(ggplot2)
library(tseries)
library(forecast)
data <- read.table(file = "BTC.csv", header = TRUE, sep = ";")
#data <- read.table(file = file.choose(), header = TRUE, sep = ";")
summary(data)
ts_data <- ts(data$CLOSE, start=c(2019,09,22), frequency = 365)
ts_data <- ts(data$PRICE, start=c(2019,09,22), frequency = 365)
plot(ts_data, main = "Котировки BTC/USD", xlab = "Time", ylab = "Value")
# изучаем временной ряд визуально по ACF/PACF
tsdisplay(ts_data)
# проведем тест на единичный корень, найдем степень интегрируемости
adf.test(ts_data)
d_data <- diff(ts_data)
adf.test(d_data)
# избавились от единичного корня путем взятия первой разности (диффиренцированием)
# коэффициенты для ARIMA = (1,1,0)
mod_1 <- arima(ts_data, order = c(1,1,0))
summary(mod_1)
prognoz <- forecast(mod_1, h=5)
prognoz
prognoz <- predict(mod_1, h=5)
prognoz
plot(prognoz,  main = "Прогноз котировок BTC/USD", xlab = "Time", ylab = "Value")
